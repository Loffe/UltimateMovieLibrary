/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ListItem2.java
 *
 * Created on 2011-apr-23, 13:46:38
 */

package se.eloff.ultimatemovielibrary;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;

import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JToggleButton;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;

/**
 * 
 * @author david
 */
public class ListElement2 extends javax.swing.JPanel {

    private static final long serialVersionUID = -6318896437132825786L;

    private JButton playButton;
    private RatingButton rating;
    private JLabel titleLabel;
    private JLabel yearLabel;
    private JToggleButton seenButton;
    private JToggleButton wishButton;
    private JToggleButton favoriteButton;
    private Movie movie;

    /** Creates new form ListItem2 */
    public ListElement2(Movie movie) {
        this.movie = movie;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        playButton = new JButton();
        titleLabel = new JLabel();
        yearLabel = new JLabel();
        seenButton = new JToggleButton();
        wishButton = new JToggleButton();
        favoriteButton = new JToggleButton();
        rating = new RatingButton();

        rating.setRating(movie.getRating());
        rating.setToolTipText(Localization.toolTipsRating);

        playButton.setIcon(Localization.moviePlayButtonIcon);
        playButton.setToolTipText(Localization.toolTipsPlay);

        if (movie.isWish()) {
            wishButton.setIcon(Localization.movieStarButtonIcon);
            wishButton.setToolTipText(Localization.toolTipsWishDisable);
        } else {
            wishButton.setIcon(Localization.movieStarButtonIconDisabled);
            wishButton.setToolTipText(Localization.toolTipsWish);
        }

        if (movie.isFavorite()) {
            favoriteButton.setIcon(Localization.movieFavoriteButtonIcon);
            favoriteButton.setToolTipText(Localization.toolTipsFavoriteDisable);
        } else {
            favoriteButton
                    .setIcon(Localization.movieFavoriteButtonIconDisabled);
            favoriteButton.setToolTipText(Localization.toolTipsFavorite);
        }

        if (movie.isSeen()) {
            seenButton.setIcon(Localization.movieSeenButtonIcon);
            seenButton.setToolTipText(Localization.toolTipsSeenDisable);
        } else {
            seenButton.setIcon(Localization.movieSeenButtonIconDisabled);
            seenButton.setToolTipText(Localization.toolTipsSeen);
        }

        wishButton.setSelected(movie.isWish());
        favoriteButton.setSelected(movie.isFavorite());
        seenButton.setSelected(movie.isSeen());

        titleLabel.setFont(new Font(titleLabel.getFont().getName(), titleLabel
                .getFont().getStyle(), Localization.movieTitleFontSize));
        titleLabel.setText(movie.getName());
        titleLabel.setAlignmentY(0.0F);
        titleLabel.setText(movie.getName());

        yearLabel.setFont(new Font(yearLabel.getFont().getName(), yearLabel
                .getFont().getStyle(), Localization.movieYearFontSize));
        if (movie.getYear() != 0)
            yearLabel.setText(Integer.toString(movie.getYear()));
        else
            yearLabel.setText(Localization.movieNoYearText);
        yearLabel.setAlignmentY(0.0F);

        seenButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        wishButton.setHorizontalTextPosition(SwingConstants.RIGHT);
        favoriteButton.setHorizontalTextPosition(SwingConstants.RIGHT);

        javax.swing.GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout
                .createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                        layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(playButton,
                                        GroupLayout.PREFERRED_SIZE, 52,
                                        GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(
                                        LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(
                                        layout.createParallelGroup(
                                                GroupLayout.Alignment.LEADING)
                                                .addComponent(yearLabel)
                                                .addComponent(titleLabel, 50,
                                                        50, Short.MAX_VALUE))
                                .addGap(57, 57, 57)
                                .addComponent(seenButton,
                                        GroupLayout.PREFERRED_SIZE, 52,
                                        GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(
                                        LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wishButton,
                                        GroupLayout.PREFERRED_SIZE, 52,
                                        GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(
                                        LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(favoriteButton,
                                        GroupLayout.PREFERRED_SIZE, 52,
                                        GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(
                                        LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rating,
                                        GroupLayout.PREFERRED_SIZE, 300,
                                        GroupLayout.PREFERRED_SIZE)));
        layout.setVerticalGroup(layout
                .createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                        layout.createSequentialGroup()

                                .addGroup(
                                        layout.createParallelGroup(
                                                GroupLayout.Alignment.TRAILING)
                                                .addComponent(
                                                        playButton,
                                                        GroupLayout.PREFERRED_SIZE,
                                                        52,
                                                        GroupLayout.PREFERRED_SIZE)
                                                .addGroup(
                                                        GroupLayout.Alignment.LEADING,
                                                        layout.createParallelGroup(
                                                                GroupLayout.Alignment.LEADING)
                                                                .addGroup(
                                                                        GroupLayout.Alignment.TRAILING,
                                                                        layout.createSequentialGroup()
                                                                                .addGap(10,
                                                                                        10,
                                                                                        10)
                                                                                .addComponent(
                                                                                        titleLabel)

                                                                                .addComponent(
                                                                                        yearLabel))

                                                                .addComponent(
                                                                        rating,
                                                                        GroupLayout.PREFERRED_SIZE,
                                                                        70,
                                                                        GroupLayout.PREFERRED_SIZE))))
                .addGroup(
                        layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(
                                        layout.createParallelGroup(
                                                GroupLayout.Alignment.LEADING)
                                                .addComponent(
                                                        seenButton,
                                                        GroupLayout.PREFERRED_SIZE,
                                                        52,
                                                        GroupLayout.PREFERRED_SIZE)
                                                .addComponent(
                                                        wishButton,
                                                        GroupLayout.PREFERRED_SIZE,
                                                        52,
                                                        GroupLayout.PREFERRED_SIZE)
                                                .addComponent(
                                                        favoriteButton,
                                                        GroupLayout.PREFERRED_SIZE,
                                                        52,
                                                        GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(10, Short.MAX_VALUE)));
        playButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ExternalPlayerLauncher.getInstance().playMovie(movie);
            }
        });

        seenButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // TODO Auto-generated method stub
            }
        });

        wishButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // TODO Auto-generated method stub
            }
        });

        favoriteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // TODO Auto-generated method stub
            }
        });

        rating.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                movie.setRating(rating.getRating());
                try {
                    DatabaseManager.getInstance().getMovieDao().update(movie);
                } catch (SQLException e1) {
                    System.out
                            .println("Failed to update movie with new rating");
                }
            }
        });

        wishButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                movie.setWish(wishButton.isSelected());
                if (movie.isWish()) {
                    wishButton.setIcon(Localization.movieStarButtonIcon);
                    wishButton.setToolTipText(Localization.toolTipsWishDisable);
                } else {
                    wishButton
                            .setIcon(Localization.movieStarButtonIconDisabled);
                    wishButton.setToolTipText(Localization.toolTipsWish);
                }

                try {
                    DatabaseManager.getInstance().getMovieDao().update(movie);
                } catch (SQLException e1) {
                    System.out
                            .println("Failed to update movie with new rating");
                }
            }
        });

        favoriteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                movie.setFavorite(favoriteButton.isSelected());
                if (movie.isFavorite()) {
                    favoriteButton
                            .setIcon(Localization.movieFavoriteButtonIcon);
                    favoriteButton
                            .setToolTipText(Localization.toolTipsFavoriteDisable);
                } else {
                    favoriteButton
                            .setIcon(Localization.movieFavoriteButtonIconDisabled);
                    favoriteButton
                            .setToolTipText(Localization.toolTipsFavorite);
                }

                try {
                    DatabaseManager.getInstance().getMovieDao().update(movie);
                } catch (SQLException e1) {
                    System.out
                            .println("Failed to update movie with new rating");
                }
            }
        });

        seenButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                movie.setSeen(seenButton.isSelected());
                if (movie.isSeen()) {
                    seenButton.setIcon(Localization.movieSeenButtonIcon);
                    seenButton.setToolTipText(Localization.toolTipsSeenDisable);
                } else {
                    seenButton
                            .setIcon(Localization.movieSeenButtonIconDisabled);
                    seenButton.setToolTipText(Localization.toolTipsSeen);
                }

                try {
                    DatabaseManager.getInstance().getMovieDao().update(movie);
                } catch (SQLException e1) {
                    System.out
                            .println("Failed to update movie with new rating");
                }
            }
        });
    }// </editor-fold>
}
